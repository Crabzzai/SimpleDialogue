{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SimpleDialogue","text":"<p>A dialogue system for Roblox games. SimpleDialogue makes it easy to create NPCs with interactive dialogues, quests, and shops.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy-to-use API for creating dialogue trees</li> <li>Proximity-based NPC interaction</li> <li>Type-safe with Luau types</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>SimpleDialogue is a comprehensive solution for implementing dialogue systems in your Roblox games. Whether you need simple NPC interactions or complex branching dialogues with quests, SimpleDialogue provides an intuitive API to help you build engaging player experiences.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Basic Usage</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"#license","title":"License","text":"<p>SimpleDialogue is available under the MIT License - feel free to use it in your games!</p>"},{"location":"contributing/","title":"Contributing to SimpleDialogue","text":"<p>Thank you for your interest in contributing to SimpleDialogue! This guide will help you get started with the development process.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork: <code>git clone https://github.com/your-username/SimpleDialogue.git</code></li> <li>Set up the development environment:</li> <li>Install Rojo</li> <li>Install Wally</li> <li>Install dependencies: <code>wally install</code></li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#code-structure","title":"Code Structure","text":"<p>SimpleDialogue is structured into several main components:</p> <ul> <li>System: Core dialogue system functionality</li> <li>UI: User interface components</li> <li>Handlers: Interaction handlers</li> </ul>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<p>Please follow these guidelines when contributing:</p> <ul> <li>Use Luau's strict type checking</li> <li>Add type annotations to functions and variables</li> <li>Document public-facing functions with comments</li> <li>Keep code modular and follow OOP principles</li> <li>Follow naming conventions:</li> <li>PascalCase for classes/modules</li> <li>camelCase for variables/functions</li> <li>UPPER_CASE for constants</li> </ul>"},{"location":"contributing/#testing-changes","title":"Testing Changes","text":"<ol> <li>Make your changes</li> <li>Test in a Roblox place using the testing project:</li> <li><code>rojo serve testing.project.json</code></li> <li>Open Roblox Studio and connect to the Rojo server</li> </ol>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Commit your changes: <code>git commit -m \"Description of changes\"</code></li> <li>Push to your fork: <code>git push origin your-branch-name</code></li> <li>Open a pull request</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>When submitting a pull request:</p> <ol> <li>Describe what was changed and why</li> <li>Include screenshots or videos if UI changes were made</li> <li>Ensure your code passes the existing tests</li> <li>Add tests if you've added new functionality</li> <li>Update documentation if necessary</li> </ol>"},{"location":"contributing/#bug-reports-and-feature-requests","title":"Bug Reports and Feature Requests","text":"<p>Use the GitHub Issues tracker to:</p> <ul> <li>Report bugs</li> <li>Request new features</li> <li>Discuss potential changes</li> </ul> <p>Provide as much information as possible, including:</p> <ul> <li>Steps to reproduce (for bugs)</li> <li>Expected vs. actual behavior</li> <li>Screenshots or videos if applicable</li> <li>Suggestions for implementation (for features)</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>SimpleDialogue uses MkDocs for documentation. To preview documentation changes:</p> <ol> <li>Install MkDocs: <code>pip install mkdocs mkdocs-material</code></li> <li>Start the documentation server: <code>mkdocs serve</code></li> <li>Open your browser to <code>http://localhost:8000</code></li> </ol>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to SimpleDialogue, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"api/core/","title":"Core API","text":"<p>This page documents the core functionality of SimpleDialogue.</p>"},{"location":"api/core/#simpledialogue","title":"SimpleDialogue","text":"<p>The main module that provides dialogue creation and management capabilities.</p>"},{"location":"api/core/#methods","title":"Methods","text":""},{"location":"api/core/#simpledialoguenewmodel","title":"<code>SimpleDialogue.new(model)</code>","text":"<p>Creates a new dialogue controller attached to the specified model.</p> <p>Parameters: - <code>model</code>: The NPC model (Instance)</p> <p>Returns: - A dialogue controller instance</p> <p>Example: <pre><code>local dialogue = SimpleDialogue.new(npcModel)\n</code></pre></p>"},{"location":"api/core/#simpledialoguecreatenodetext-options","title":"<code>SimpleDialogue.CreateNode(text, options)</code>","text":"<p>Creates a dialogue node with the specified text and options.</p> <p>Parameters:</p> <ul> <li> <p><code>text</code>: The NPC's dialogue text (string)</p> </li> <li> <p><code>options</code>: Array of options created with <code>SimpleDialogue.CreateOption()</code></p> </li> </ul> <p>Returns: - A dialogue node object</p> <p>Example: <pre><code>local node = SimpleDialogue.CreateNode(\"Hello! How can I help you?\", {\n    SimpleDialogue.CreateOption(\"Option 1\", callback),\n    SimpleDialogue.CreateOption(\"Option 2\", callback)\n})\n</code></pre></p>"},{"location":"api/core/#simpledialoguecreateautonodetext-callback-shouldenddialogue","title":"<code>SimpleDialogue.CreateAutoNode(text, callback, shouldEndDialogue)</code>","text":"<p>Creates a dialogue node with the specified text and options.</p> <p>Parameters:</p> <ul> <li> <p><code>text</code>: The NPC's dialogue text (string)</p> </li> <li> <p><code>callback</code>: Function to call when the dialogue text is fully shown.</p> </li> <li> <p><code>shouldEndDialogue</code>: A boolean to let the controller know whether if it should automatically end the dialogue after the callback has been ran.</p> </li> </ul> <p>Returns: - A dialogue node object</p> <p>Example: <pre><code>local node = SimpleDialogue.CreateAutoNode(\"Hello! How can I help you?\", function()\n    task.spawn(5)\n    dialogue:EndDialogue()\nend, false)\n</code></pre></p>"},{"location":"api/core/#simpledialoguecreateoptiontext-callback-next-displaytext","title":"<code>SimpleDialogue.CreateOption(text, callback, next, displayText)</code>","text":"<p>Creates a dialogue option for a node.</p> <p>Parameters:</p> <ul> <li> <p><code>text</code>: The text displayed for this option (string)</p> </li> <li> <p><code>callback</code>: Function to call when this option is selected (function, optional)</p> </li> <li> <p><code>next</code>: Index of the next node to display, or -1 to end dialogue (number, optional, defaults to -1)</p> </li> <li> <p><code>displayText</code>: Text to display from the NPC after selecting this option (string, optional)</p> </li> </ul> <p>Returns: - A dialogue option object</p> <p>Example: <pre><code>local option = SimpleDialogue.CreateOption(\"Tell me more\", function()\n    print(\"Player chose to learn more\")\nend, 2, \"I'm glad you're interested!\")\n</code></pre></p>"},{"location":"api/core/#simpledialoguecreateconditioncondition-item-failcallback","title":"<code>SimpleDialogue.CreateCondition(condition, item, failCallback)</code>","text":"<p>Creates a dialogue option for a node.</p> <p>Parameters:</p> <ul> <li> <p><code>condition</code>: The condition to be met (boolean | function)</p> </li> <li> <p><code>item</code>: The item the condition is about (DialogueNode | DialogueOption)</p> </li> <li> <p><code>failCallback</code>: Callback function if a node failed to open (function, optional)</p> </li> </ul> <p>Returns: - A dialogue option object</p> <p>Example: <pre><code>local beenHereBefore = false\n\nlocal node = SimpleDialogue.CreateCondition(\n    function()\n        return beenHereBefore\n    end,\n    SimpleDialogue.CreateAutoNode(\"Have a good day then!\", function()\n        task.wait(5)\n        dialogue:EndDialogue()\n    end, false),\n    function()\n        print(\"This will run, if the node failed to open.\")\n    end\n),\n</code></pre></p>"},{"location":"api/core/#simpledialoguecreatetreenodes","title":"<code>SimpleDialogue.CreateTree(nodes)</code>","text":"<p>Creates a complete dialogue tree from a collection of nodes.</p> <p>Parameters:</p> <ul> <li><code>nodes</code>: Array of dialogue nodes created with <code>SimpleDialogue.CreateNode()</code>, and <code>SimpleDialogue.CreateAutoNode()</code></li> </ul> <p>Returns: - A dialogue tree object</p> <p>Example: <pre><code>local dialogueTree = SimpleDialogue.CreateTree({\n    SimpleDialogue.CreateNode(\"Hello!\", options1),\n    SimpleDialogue.CreateNode(\"More information\", options2)\n})\n</code></pre></p>"},{"location":"api/core/#instance-methods","title":"Instance Methods","text":"<p>Methods available on dialogue controller instances:</p>"},{"location":"api/core/#setdialoguetreetree","title":"<code>:SetDialogueTree(tree)</code>","text":"<p>Sets the dialogue tree for this controller.</p> <p>Parameters:</p> <ul> <li><code>tree</code>: A dialogue tree created with <code>SimpleDialogue.CreateTree()</code></li> </ul> <p>Example: <pre><code>dialogue:SetDialogueTree(dialogueTree)\n</code></pre></p>"},{"location":"api/core/#setconfigurationconfig","title":"<code>:SetConfiguration(config)</code>","text":"<p>Configures the dialogue system settings.</p> <p>Parameters:</p> <ul> <li> <p><code>config</code>: Configuration table with the following options:</p> </li> <li> <p><code>textSpeed</code>: Speed of text typing effect (number)</p> </li> <li> <p><code>autoAdvance</code>: Whether dialogue auto-advances (boolean)</p> </li> <li> <p><code>proximityDistance</code>: Maximum player distance before dialogue ends (number)</p> </li> <li> <p><code>offsetDistance</code>: UI offset distance (number)</p> </li> <li> <p>Various visual customization options</p> </li> </ul> <p>Example: <pre><code>dialogue:SetConfiguration({\n    textSpeed = 0.03,\n    proximityDistance = 10\n})\n</code></pre></p>"},{"location":"api/core/#displaynodenode","title":"<code>:DisplayNode(node)</code>","text":"<p>Displays a specific dialogue node.</p> <p>Parameters:</p> <ul> <li><code>node</code>: A dialogue node from the tree, either a node instance or specific number</li> </ul> <p>Example: <pre><code>dialogue:DisplayNode(dialogueTree[2]) -- Display the second node\ndialogue:DisplayNode(4) -- Display the fourth node \n</code></pre></p>"},{"location":"api/core/#shownpctexttext-callback","title":"<code>:ShowNPCText(text, callback)</code>","text":"<p>Shows a message from the NPC with a typing effect.</p> <p>Parameters:</p> <ul> <li> <p><code>text</code>: Message text to display</p> </li> <li> <p><code>callback</code>: Function to call when text is fully displayed (optional)</p> </li> </ul> <p>Example: <pre><code>dialogue:ShowNPCText(\"This is important information!\", function()\n    print(\"Text displayed fully\")\nend)\n</code></pre></p>"},{"location":"api/core/#showplayertexttext","title":"<code>:ShowPlayerText(text)</code>","text":"<p>Shows text above the player's character.</p> <p>Parameters:</p> <ul> <li><code>text</code>: Text to display above the player</li> </ul> <p>Example: <pre><code>dialogue:ShowPlayerText(\"I need to find that sword!\")\n</code></pre></p>"},{"location":"api/core/#enddialogue","title":"<code>:EndDialogue()</code>","text":"<p>Ends the current dialogue interaction.</p> <p>Example: <pre><code>dialogue:EndDialogue()\n</code></pre></p>"},{"location":"api/core/#setoninteractcallback","title":"<code>:SetOnInteract(callback)</code>","text":"<p>Sets a callback to run when dialogue begins.</p> <p>Parameters:</p> <ul> <li><code>callback</code>: Function to call when dialogue starts</li> </ul> <p>Example: <pre><code>dialogue:SetOnInteract(function()\n    print(\"Dialogue started\")\nend)\n</code></pre></p>"},{"location":"api/core/#setonoptionselectedcallback","title":"<code>:SetOnOptionSelected(callback)</code>","text":"<p>Sets a callback to run when a dialogue option is selected.</p> <p>Parameters:</p> <ul> <li><code>callback</code>: Function to call with the selected option</li> </ul> <p>Example: <pre><code>dialogue:SetOnOptionSelected(function(option)\n    print(\"Selected option:\", option.text)\nend)\n</code></pre></p>"},{"location":"api/core/#setondialogueendcallback","title":"<code>:SetOnDialogueEnd(callback)</code>","text":"<p>Sets a callback to run when dialogue ends.</p> <p>Parameters:</p> <ul> <li><code>callback</code>: Function to call when dialogue ends</li> </ul> <p>Example: <pre><code>dialogue:SetOnDialogueEnd(function()\n    print(\"Dialogue ended\")\nend)\n</code></pre></p>"},{"location":"api/core/#destroy","title":"<code>:Destroy()</code>","text":"<p>Cleans up the dialogue controller and removes event connections.</p> <p>Example: <pre><code>dialogue:Destroy()\n</code></pre></p>"},{"location":"getting-started/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental concepts and basic usage of SimpleDialogue.</p>"},{"location":"getting-started/basic-usage/#creating-a-simple-dialogue","title":"Creating a Simple Dialogue","text":"<p>To create a basic NPC dialogue:</p> <pre><code>local SimpleDialogue = require(Path.To.SimpleDialogue)\n\n-- Assuming you have an NPC model\nlocal npcModel = workspace.NPC\n\n-- Create a dialogue controller for the NPC\nlocal dialogue = SimpleDialogue.new(npcModel)\n\n-- Create a simple dialogue tree\nlocal dialogueTree = SimpleDialogue.CreateTree({\n    SimpleDialogue.CreateNode(\"Hello! How can I help you today?\", {\n        SimpleDialogue.CreateOption(\"Tell me about this place\", function()\n            dialogue:ShowNPCText(\"This is a wonderful town with many secrets to discover!\")\n        end),\n        SimpleDialogue.CreateOption(\"I'm just browsing\", function()\n            dialogue:ShowNPCText(\"Feel free to look around!\")\n        end)\n    })\n})\n\n-- Set the dialogue tree to the NPC\ndialogue:SetDialogueTree(dialogueTree)\n</code></pre>"},{"location":"getting-started/basic-usage/#understanding-dialogue-trees","title":"Understanding Dialogue Trees","text":"<p>A dialogue tree in SimpleDialogue consists of nodes and options:</p> <ul> <li>Nodes: Text spoken by the NPC</li> <li>Options: Choices available to the player</li> </ul> <p>Each node can have multiple options (unless an auto node), and each option can lead to another node, creating a branching conversation. An auto node, is used to show some text above the NPC, and then directly run a callback function afterwards, without giving the player options to choose from.</p>"},{"location":"getting-started/basic-usage/#working-with-dialogue-callbacks","title":"Working with Dialogue Callbacks","text":"<p>Callbacks are functions executed when a player selects an option. They can be used to:</p> <ul> <li>Progress the dialogue</li> <li>Give items or rewards</li> <li>Trigger game events</li> <li>Update quests</li> </ul> <p>Example with callbacks:</p> <pre><code>local function givePlayerGold(player, amount)\n    -- Implementation for giving gold\n    print(\"Gave player\", amount, \"gold\")\nend\n\nlocal dialogueTree = SimpleDialogue.CreateTree({\n    SimpleDialogue.CreateNode(\"Would you like a reward?\", {\n        SimpleDialogue.CreateOption(\"Yes, please!\", function(player)\n            dialogue:ShowNPCText(\"Here's 100 gold pieces!\")\n            givePlayerGold(player, 100)\n        end),\n        SimpleDialogue.CreateOption(\"No thanks\", function()\n            dialogue:ShowNPCText(\"Come back if you change your mind.\")\n        end)\n    })\n})\n</code></pre>"},{"location":"getting-started/basic-usage/#using-node-navigation","title":"Using Node Navigation","text":"<p>You can create multi-node conversations by using the node index parameter:</p> <pre><code>local dialogueTree = SimpleDialogue.CreateTree({\n    -- First node (index 1)\n    SimpleDialogue.CreateNode(\"Welcome to our village! First time visiting?\", {\n        SimpleDialogue.CreateOption(\"Yes, it's my first time\", nil, 2), -- Go to node at index 2\n        SimpleDialogue.CreateOption(\"No, I've been here before\", nil, 3), -- Go to node at index 3\n        SimpleDialogue.CreateOption(\"No, I've been here before\", function()\n            task.wait(5)\n            dialogue:DisplayNode(4) -- Manually change node in the callback\n        end, 0), -- 0 means clearing the options, without ending the dialogue.\n        SimpleDialogue.CreateOption(\"Goodbye\", nil, -1) -- -1 means end dialogue\n    }),\n\n    -- Second node (index 2)\n    SimpleDialogue.CreateNode(\"Well, welcome! You should check out our marketplace.\", {\n        SimpleDialogue.CreateOption(\"Thanks for the tip\", nil, -1)\n    }),\n\n    -- Third node (index 3)\n    SimpleDialogue.CreateNode(\"Nice to see you again!\", {\n        SimpleDialogue.CreateOption(\"Good to be back\", nil, -1)\n    })\n\n    -- Third node (index 4)\n    SimpleDialogue.CreateNode(\"Nice to see you again!\", {\n        SimpleDialogue.CreateOption(\"Good to be back\", nil, -1)\n    })\n})\n</code></pre>"},{"location":"getting-started/basic-usage/#using-auto-node","title":"Using Auto Node","text":"<p>You can create nodes which do not show options to the player, but will instead run a function after the text above the NPC is fully shown.</p> <pre><code>local dialogueTree = SimpleDialogue.CreateTree({\n    -- First node (index 1)\n    SimpleDialogue.CreateNode(\"Welcome to our village! First time visiting?\", {\n        SimpleDialogue.CreateOption(\"Yes, it's my first time\", nil, 2),\n        SimpleDialogue.CreateOption(\"No, I've been here before\", nil, 3),\n        SimpleDialogue.CreateOption(\"Goodbye\", nil, -1)\n    }),\n\n    -- Second node (index 2)\n    SimpleDialogue.CreateAutoNode(\"Have a look at my shop then!\", function()\n        print(\"This will open a shop, and automatically end the dialogue after the callback has been run.\")\n    end),\n\n    -- Third node (index 3)\n    SimpleDialogue.CreateAutoNode(\"Have a good day then!\", function()\n        task.wait(5)\n        dialogue:EndDialogue()\n    end, false) -- This will let the dialogue stay active, so you can end the dialogue yourself.\n})\n</code></pre>"},{"location":"getting-started/basic-usage/#using-conditions","title":"Using Conditions","text":"<p>You can create some conditions for both options and nodes, these nodes will only be shown if that certain condition is met, and the same with nodes, they will only be available when certain condition is met.</p> <pre><code>local beenHereBefore = false\n\nlocal dialogueTree = SimpleDialogue.CreateTree({\n    -- First node (index 1)\n    SimpleDialogue.CreateNode(\"Welcome to our village! First time visiting?\", {\n        SimpleDialogue.CreateOption(\"Yes, it's my first time\", nil, 2),\n        -- This is a dynamic condition, as soon as `beenHereBefore` changes value to true, this option will be shown.\n        SimpleDialogue.CreateCondition(\n            function()\n                return beenHereBefore\n            end,\n            SimpleDialogue.CreateOption(\"No, I've been here before\", nil, 3)\n        ),\n        SimpleDialogue.CreateOption(\"Goodbye\", nil, -1)\n    }),\n\n    -- Second node (index 2)\n    -- A static condition, this condition is determined when it's defined, and will not change.\n    SimpleDialogue.CreateCondition(\n        1 == 1,\n        SimpleDialogue.CreateNode(\"Welcome to our village! First time visiting?\", {\n            SimpleDialogue.CreateOption(\"Yes, it's my first time\", nil, 2),\n            SimpleDialogue.CreateOption(\"No, I've been here before\", nil, 3),\n            SimpleDialogue.CreateOption(\"Goodbye\", nil, -1)\n        })\n    ),\n\n    -- Third node (index 3)\n    SimpleDialogue.CreateCondition(\n        function()\n            return beenHereBefore\n        end,\n        SimpleDialogue.CreateAutoNode(\"Have a good day then!\", function()\n            task.wait(5)\n            dialogue:EndDialogue()\n        end, false),\n        function()\n            print(\"This will run, if the node failed to open.\")\n        end\n    ),\n})\n</code></pre>"},{"location":"getting-started/basic-usage/#configuring-dialoguesystem","title":"Configuring DialogueSystem","text":"<p>You can customize various aspects of the dialogue system:</p> <pre><code>-- Create a dialogue controller\nlocal dialogue = SimpleDialogue.new(npcModel)\n\n-- Configure the dialogue settings\ndialogue:SetConfiguration({\n    textSpeed = 0.03,             -- Speed of text typing effect\n    autoAdvance = false,          -- Whether to auto-advance dialogue\n    proximityDistance = 10,       -- Maximum distance before dialogue ends\n    offsetDistance = 2,           -- UI offset distance\n    useScreenGui = true,          -- Whether to have the dialogue in PlayerGui or on SurfaceGui\n})\n</code></pre>"},{"location":"getting-started/basic-usage/#event-hooks","title":"Event Hooks","text":"<p>You can set up event hooks to listen for dialogue interactions:</p> <pre><code>-- Track when dialogue begins\ndialogue:SetOnInteract(function()\n    print(\"Dialogue started\")\n})\n\n-- Track when an option is selected\ndialogue:SetOnOptionSelected(function(option)\n    print(\"Selected option:\", option.text)\n})\n\n-- Track when dialogue ends\ndialogue:SetOnDialogueEnd(function()\n    print(\"Dialogue ended\")\n})\n</code></pre> <p>Refer to the API documentation for more configuration options and advanced features.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install SimpleDialogue in your Roblox project.</p>"},{"location":"getting-started/installation/#using-wally-recommended","title":"Using Wally (Recommended)","text":"<p>SimpleDialogue is available as a package through Wally, a package manager for Roblox.</p> <ol> <li> <p>Make sure you have Wally installed on your system.</p> </li> <li> <p>Add SimpleDialogue as a dependency to your <code>wally.toml</code> file:</p> </li> </ol> <pre><code>[dependencies]\nSimpleDialogue = \"crabzzai/simpledialogue@0.2.1\"\n</code></pre> <ol> <li> <p>Run <code>wally install</code> to install the package.</p> </li> <li> <p>Use Rojo to sync the packages to your Roblox place.</p> </li> </ol>"},{"location":"getting-started/installation/#manual-installation","title":"Manual Installation","text":"<p>If you prefer to manually install SimpleDialogue:</p> <ol> <li> <p>Download the latest release from the GitHub repository.</p> </li> <li> <p>Extract the files and place them in your project's directory.</p> </li> <li> <p>Make sure to set up the proper paths to access the module from your scripts.</p> </li> </ol>"}]}